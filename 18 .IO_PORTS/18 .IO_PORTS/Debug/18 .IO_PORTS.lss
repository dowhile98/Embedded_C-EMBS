
18 .IO_PORTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000134  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000163  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000171  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000936  00000000  00000000  00000191  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000664  00000000  00000000  00000ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024c  00000000  00000000  0000112b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000dc  000000dc  00000130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000005c  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000080 <main>:


int main(void)
{
	/*DATA DIRECTION PIN*/
	PIN_OUTPUT(LED);		//PB1, PB2 -> salida digital
  80:	84 b1       	in	r24, 0x04	; 4
  82:	84 60       	ori	r24, 0x04	; 4
  84:	84 b9       	out	0x04, r24	; 4
	BIT_SET(DDRB, 1);
  86:	84 b1       	in	r24, 0x04	; 4
  88:	82 60       	ori	r24, 0x02	; 2
  8a:	84 b9       	out	0x04, r24	; 4
	
	
	/*DDRD &=~ (1U<<DDD3);				//PD3 -> entrada digital
	PORTD |= 1U<<PORTB3;				//habilita la resistencia pull up para el pin PD3*/
	PIN_INPUT_PU(BUTTON);
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	87 7f       	andi	r24, 0xF7	; 247
  90:	8a b9       	out	0x0a, r24	; 10
  92:	8b b1       	in	r24, 0x0b	; 11
  94:	88 60       	ori	r24, 0x08	; 8
  96:	8b b9       	out	0x0b, r24	; 11
	
    while(1)
    {
        //TODO:: Please write your application code 
		PORTB |= 1U<<PORTB2;
  98:	85 b1       	in	r24, 0x05	; 5
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	81 ee       	ldi	r24, 0xE1	; 225
  a2:	94 e0       	ldi	r25, 0x04	; 4
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x24>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2e>
  ae:	00 00       	nop
		_delay_ms(100);
		PORTB &=~ (1<<PORTB2);
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8b 7f       	andi	r24, 0xFB	; 251
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	81 ee       	ldi	r24, 0xE1	; 225
  ba:	94 e0       	ldi	r25, 0x04	; 4
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x3c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x46>
  c6:	00 00       	nop
		_delay_ms(100);
		/************************************/
		if( PIN_READ(BUTTON)/*PIND & 1U<<3*/){	
  c8:	4b 9b       	sbis	0x09, 3	; 9
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <main+0x54>
			BIT_SET(PORTB, 1);
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	e2 cf       	rjmp	.-60     	; 0x98 <main+0x18>
		}else{
			BIT_RESET(PORTB, 1);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	85 b9       	out	0x05, r24	; 5
  da:	de cf       	rjmp	.-68     	; 0x98 <main+0x18>
